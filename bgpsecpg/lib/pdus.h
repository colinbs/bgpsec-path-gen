/*
 * Header file that contains generic BGPsec PDUs. There is no need to genrate
 * custom BGP PDUs every time since the relevant part of the BGPsec updates is
 * the BGPsec_PATH attribute.
 */

#ifndef PDUS_H
#define PDUS_H

#include <arpa/inet.h>

#define BGPSEC_UPD_NLRI_OFFSET 36
#define BGPSEC_UPD_PATH_OFFSET 51
#define BGPSEC_UPD_SIZE 4196
#define BGPSEC_UPD_HEADER_SIZE 23
#define BGPSEC_UPD_HEADER_REST_SIZE 11

static uint8_t bgpsec_upd_header[] = {
    /* Marker */
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    /* Length */
    0x00, 0x9E,
    /* Type */
    0x02,
    /* Withdrawn Routes Length */
    0x00, 0x00,
    /* Total Path Attribute Length */
    0x00, 0x00,
};

//static uint8_t bgpsec_upd_header_mp[] = {
//    /* MP_REACH_NLRI */
//    /* Flags */
//    0x90,
//    /* Type Code */
//    0x0E,
//    /* Length */
//    0x00, 0x0D,
//    /* AFI */
//    0x00, 0x01,
//    /* SAFI */
//    0x01,
//    /* Next hop network address */
//    0x00, 0x00, 0x00, 0x00, 0x00,
//    /* Number of Subnetwork points of attachment (SNPA) */
//    0x00,
//    /* NLRI */
//    0x00, 0x00, 0x00, 0x00,
//};

static uint8_t bgpsec_upd_header_rest[] = {
    /* ORIGIN */
    /* Flags */
    0x40,
    /* Type Code */
    0x01,
    /* Length */
    0x01,
    /* Origin */
    0x00,
    /* MULTI_EXIT_DISC */
    /* Flags */
    0x80,
    /* Type Code */
    0x04,
    /* Length */
    0x04,
    /* Multiple exit discriminator */
    0x00, 0x00, 0x00, 0x00,
};

//static uint8_t bgpsec_path[] = {
//    /* BGPsec_PATH */
//    /* Flags */
//    0x90,
//    /* Type Code */
//    0x21,
//    /* Length */
//    0x00, 0x67,
//    /* Secure Path Length */
//    0x00, 0x08,
//    /* pCount */
//    0x01,
//    /* Flags */
//    0x00,
//    /* AS Number */
//    0x00, 0x00, 0xFB, 0xF0,
//    /* Signature Block Length */
//    0x00, 0x5F,
//    /* Algo ID */
//    0x01,
//    /* SKI */
//    0xAB, 0x4D, 0x91, 0x0F, 0x55, 0xCA, 0xE7, 0x1A,
//    0x21, 0x5E, 0xF3, 0xCA, 0xFE, 0x3A, 0xCC, 0x45,
//    0xB5, 0xEE, 0xC1, 0x54,
//    /* Length */
//    0x00, 0x46,
//    /* Signature */
//    0x30, 0x44, 0x02, 0x20, 0x21, 0xAA, 0x00, 0x58,
//    0x93, 0x12, 0x8D, 0x2C, 0x7D, 0x1E, 0xE0, 0xF7,
//    0x08, 0x69, 0xDF, 0xE7, 0x14, 0x97, 0x34, 0xCB,
//    0x97, 0x2A, 0xBF, 0x7D, 0x2B, 0xCB, 0xB5, 0x09,
//    0xF3, 0xCF, 0x8B, 0x9B, 0x02, 0x20, 0x5A, 0x39,
//    0x40, 0x38, 0xFE, 0x6B, 0xC7, 0x8B, 0x74, 0xEE,
//    0xD1, 0x63, 0x0C, 0x51, 0x3E, 0xCB, 0x91, 0x79,
//    0x6B, 0x3D, 0xA8, 0x29, 0x0A, 0xEF, 0x37, 0x20,
//    0xA4, 0x41, 0x3D, 0x26, 0xB9, 0x08
//};
#endif
